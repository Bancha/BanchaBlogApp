/*
 * File: js/app/controller/Articles.js
 *
 * This file was generated by Sencha Designer version 2.0.0.
 * http://www.sencha.com/products/designer/
 *
 * This file requires use of the Ext JS 4.0.x library, under independent license.
 * License of Sencha Designer does not include license for Ext JS 4.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * You should implement event handling and custom methods in this
 * class.
 */

Ext.define('BlogApp.controller.Articles', {
    extend: 'Ext.app.Controller',

    stores: [
        'Articles'
    ],
    refs: [
        {
            ref: 'articlesList',
            selector: 'articleslist'
        },
        {
            ref: 'articleReader',
            selector: 'articlereader'
        },
        {
            ref: 'articlePanel',
            selector: '#articlePanel'
        }
    ],

    init: function() {
        this.control({
            "articleslist": {
                selectionchange: this.onArticleListSelectionChange
            }
        });

        this.application.on({
            articlechanged: {
                fn: this.onArticleChanged,
                scope: this
            },
            articlesloaded: {
                fn: this.onArticlesLoaded,
                scope: this
            },
            loggedin: {
                fn: this.onLoggedin,
                scope: this
            }
        });
    },

    onArticleListSelectionChange: function(tablepanel, selections, options) {
        // make an application wide event
        this.application.fireEvent('articlechanged',selections[0]);
    },

    onArticleChanged: function(record) {
        /**
        * refresh the single article view
        */
        var me = this,
            view = this.getArticleReader();

        // update the content
        view.tpl.overwrite(view.el, record.data);

        // update the title
        this.getArticlePanel().setTitle(record.get('title'));
    },

    onArticlesLoaded: function() {
        // as default select the first articles list element
        var firstRecord = this.getStore('Articles').getAt(0);
        this.getArticlesList().getSelectionModel().select(firstRecord);

        // this other views will be informed by the triggered application event 'articlechanged';
    },

    onLoggedin: function(userRecord) {
        /**
        * Only show the article edit and delete to admins
        * 
        * Normally I would dynamically render the action items in for the admin view,
        * but since promoting the ActionColumn to a own class breaks it (Designer bug!?)
        * we just remove it for non-admins
        */
        if(userRecord.get('role') === 'admin') {
            return;
        }

        var grid = this.getArticlesList(),
            headerCt = grid.headerCt,
            column = headerCt.getComponent('adminactioncolumn');
        headerCt.remove(column);
        grid.getView().refresh();
    }

});