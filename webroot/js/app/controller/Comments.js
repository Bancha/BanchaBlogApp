/*
 * File: js/app/controller/Comments.js
 *
 * This file was generated by Sencha Designer version 2.0.0.
 * http://www.sencha.com/products/designer/
 *
 * This file requires use of the Ext JS 4.0.x library, under independent license.
 * License of Sencha Designer does not include license for Ext JS 4.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * You should implement event handling and custom methods in this
 * class.
 */

Ext.define('BlogApp.controller.Comments', {
    extend: 'Ext.app.Controller',

    stores: [
        'Comments'
    ],
    refs: [
        {
            ref: 'commentForm',
            selector: 'commentform'
        }
    ],

    init: function() {
        this.control({
            "commentform button": {
                click: this.onSubmitComment
            }
        });

        this.application.on({
            articlechanged: {
                fn: this.onArticleChanged,
                scope: this
            }
        });
    },

    onArticleChanged: function(record) {
        // refresh the comments
        var store = this.getCommentsStore();

        // get the corresponding articles comments
        store.clearFilter();
        store.filter('article_id',record.get('id'));
        store.sort('created', 'ASC');


        // allways keep a reference to the active article if, for committing comments
        this.active_article = record;
    },

    onSubmitComment: function(button, e, options) {
        /*
        * if you just want to submit data to the server use this
        * (the override for ext designer fo rthis doesn't yet work, it's really compley, see designer-overrrides.js)
        */
        //this.getCommentForm().submit();

        /*
        * but since we also want to have the data inside out store, 
        * we directly add it to the store and use store.sync()
        */
        a = this;
        if(!this.getCommentForm().getForm().isValid()) {
            return false;
        }


        console.info({
            'article_id': this.active_article.get('id'), // see Comments.onArticleChanged
            'user_id'   : this.getController('Login').active_user.get('id'),
            'comment'   : this.getCommentForm().getValues().comment
        });
        this.getCommentsStore().add({
            'article_id': this.active_article.get('id'), // see Comments.onArticleChanged
            'user_id'   : this.getController('Login').active_user.get('id'),
            'comment'   : this.getCommentForm().getValues().comment
        });

        this.getCommentsStore().sync(); // save to server

    }

});