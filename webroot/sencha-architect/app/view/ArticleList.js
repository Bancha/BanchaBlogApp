/*
 * File: app/view/ArticleList.js
 *
 * This file was generated by Sencha Architect version 3.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('BlogApp.view.ArticleList', {
    extend: 'Ext.grid.Panel',
    alias: 'widget.articleslist',

    requires: [
        'Ext.grid.column.Date',
        'Ext.grid.column.Action',
        'Ext.grid.View'
    ],

    title: 'Article List',
    columnLines: true,
    enableColumnHide: false,
    enableColumnMove: false,
    forceFit: true,
    store: 'Articles',

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            columns: [
                {
                    xtype: 'gridcolumn',
                    dataIndex: 'title',
                    menuDisabled: true,
                    text: 'Name',
                    flex: 1
                },
                {
                    xtype: 'datecolumn',
                    width: 90,
                    dataIndex: 'date',
                    menuDisabled: true,
                    text: 'Created',
                    format: 'Y-m-d'
                },
                {
                    xtype: 'actioncolumn',
                    id: 'adminactioncolumn',
                    width: 27,
                    hideable: false,
                    menuDisabled: true,
                    items: [
                        {
                            handler: function(view, rowIndex, colIndex, item, e) {
                                var store = view.getStore(),
                                    rec = store.getAt(rowIndex),
                                    title = rec.get('title'); // for callback

                                    // this is normally a job for the controller, but to keep the example simple
                                    // we do it here
                                    store.remove(rec);
                                store.sync({
                                    success: function(batch, options) {
                                        Ext.Msg.alert('Deleted', 'Deleted '+title);
                                    },
                                    failure: function(batch, options) {
                                        Ext.Msg.alert('Delete Error', 'Could not delete '+title);
                                    }
                                });
                            },
                            altText: 'delete',
                            icon: '/img/icons/delete.png',
                            tooltip: 'delete'
                        }
                    ]
                }
            ],
            viewConfig: {
                width: 100
            }
        });

        me.callParent(arguments);
    }

});