/*
 * File: app/controller/Authentification.js
 *
 * This file was generated by Sencha Architect version 2.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('BlogApp.controller.Authentification', {
    extend: 'Ext.app.Controller',

    stores: [
        'Users'
    ],

    refs: [
        {
            ref: 'viewport',
            selector: 'viewport'
        },
        {
            ref: 'loginWindow',
            selector: 'loginwindow'
        },
        {
            ref: 'loginForm',
            selector: 'loginwindow formpanel'
        }
    ],

    onLoginClick: function(button, e, options) {
        // log the user in
        var me = this, // keep reference to controller and window through scope
        win = this.getLoginWindow(), 
        values = win.items.items[0].getForm().getValues();

        // mask while asking the server
        win.setLoading('logging in...');

        // login through the banchaRemotable method UsersController->login
        Bancha.getStub('User').login(values, function(result,response) {

            if(result && result.success===true) {
                // we are logged in, so hide login window
                win.hide();

                // tell application about login
                var user = Ext.create('Bancha.model.User', result.data);
                me.application.fireEvent('loggedin', user);

                // error handling
            } else if(result && result.success===false) {
                Ext.Msg.alert('Login Failed!', 'Username and password don\'t match!');
            } else {
                Ext.Msg.alert('Warning!', 'Authentication server is unreachable or returned with an error');
            }
        });
    },

    onLogoutClick: function(tool, e, options) {

        // mask for user
        this.getViewport().setLoading('Logging out...');

        // logout
        Bancha.getStub('User').logout(function() {
            // user is logged out
            window.location.reload();
        });
    },

    onLoggedIn: function(userRecord) {
        var me = this;

        // keep the record data
        this.active_user = userRecord;

        // now that we are logged in the stores can be loaded
        // (if you want a clean separation of concerns, just fire an application event 'logged in',
        // so each controller loads it's own stores)
        this.getUsersStore().load();
        this.getStore('Comments').load();
        this.getStore('Articles').load({
            callback: function() {
                // articles loaded tell everyone (see Articles controller onArticlesLoaded)
                me.application.fireEvent('articlesloaded');
            }
        });
    },

    init: function(application) {
        var me = this;

        // ask server if already logged in
        Bancha.getStub('User').login({}, function(result,response) {
        if(result && result.success) {
            var user = Ext.create('Bancha.model.User', result.data);
            me.application.fireEvent('loggedin', user);
        } else {
            // force user to log in
            var win = Ext.create('BlogApp.view.LoginWindow', {});
            win.show();
        }
    });

    this.control({
        "loginwindow button[action=login]": {
            click: this.onLoginClick
        },
        "tool[action=logout]": {
            click: this.onLogoutClick
        }
    });

    application.on({
        loggedin: {
            fn: this.onLoggedIn,
            scope: this
        }
    });
    }

});
